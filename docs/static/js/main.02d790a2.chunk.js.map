{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GIfExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","indexOf","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAUA,EAAIC,QAAQR,IAAa,EAA1B,YAAkCO,GAAlC,CAAwCP,GAAxC,mBAAsDO,OAC7EN,EAAc,OAMd,2BACIQ,KAAK,OACLC,YAAY,kBACZC,MAAQX,EACRY,SAlBc,SAACT,GACvBF,EAAcE,EAAEU,OAAOF,Y,uBCNlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATtB,kBAaZM,GAbY,4CAAH,sDCCPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAChC,OACI,yBAAKc,UAAU,QACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAKA,KCFJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECFwB,SAAEA,GAC1B,MAA0BhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAW,WACPxB,EAASC,GAAWwB,MAAM,SAACC,GACvBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAAEpB,IAEEqB,EDb2BK,CAAc1B,GAAlCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAEtB,OACI,yBAAKJ,UAAU,kBACX,4BAAMhB,GACN,yBAAKgB,UAAU,aAENI,EAAU,0CACXP,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIiB,IAAMjB,EAAIC,IACLD,UEbpBkB,EAAe,WAExB,MAAoC5C,mBAAS,CAAC,kBAAmB,cAAjE,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAEA,OACI,oCACI,yBAAKiC,UAAU,YACX,6CAEJ,yBAAKA,UAAU,aACZ,kBAAC,EAAD,CAAajC,cAAgBA,IAC5B,yBAAKiC,UAAU,oBAEPa,EAAWpB,KAAK,SAAAjB,GAAG,OACf,kBAAC,EAAD,CACImC,IAAMnC,EACNQ,SAAWR,W,MCd3CsC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.02d790a2.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState(\"\")\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if( inputValue.trim().length > 2  ) {\n            setCategories((cat) => (cat.indexOf(inputValue)>=0)? [...cat]:[inputValue,...cat]);\n            setInputValue(\"\");\n        }\n    };\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                placeholder=\"Nueva Categoria\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\nexport const getGifs = async ( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&api_key=a3YWXWBgWXNyiWEsaTmt6cwmUjM0lFh0&limit=10`;\n    const resp = await fetch( url );\n    const { data } = await resp.json(); \n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    });\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({title, url}) => {\n    return (\n        <div className=\"card\">\n            <img src={ url } alt={ title }/>\n            <p>{ title }</p>\n        </div>\n    )\n}\n\n\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs( category );\n\n    return (\n        <div className=\"container-grid\">\n            <h2>{ category }</h2>\n            <div className=\"card-grid\">\n                {\n                    (loading)? <p>Cargando...</p>:\n                    images.map( img => \n                        <GifGridItem\n                            key={ img.id }\n                            { ...img }/>\n                    )\n                }\n            </div>\n        </div>\n        \n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs( category ).then( (imgs) => {\n            setstate({\n                data: imgs,\n                loading: false\n            });\n        });\n    }, [ category ])\n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Tokyo Revengers', 'One Piece']);\n\n    return (\n        <>\n            <div className=\"cabecera\">\n                <h2>GifExpertApp</h2>\n            </div>\n            <div className=\"container\">\n               <AddCategory setCategories={ setCategories } />\n                <div className=\"lista-horizontal\">\n                    {\n                        categories.map( cat => (\n                            <GifGrid \n                                key={ cat } \n                                category={ cat }\n                            />\n                        ))\n                    }\n                </div>\n                \n            </div>\n            \n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GIfExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}